

Terminals which are not used:

   ELSE
   WHILE
   BREAK


Conflict in state 60 between rule 15 and token PLUS resolved as reduce.
Conflict in state 60 between rule 15 and token MINUS resolved as reduce.
Conflict in state 60 between rule 15 and token TIMES resolved as shift.
Conflict in state 60 between rule 15 and token DIVIDE resolved as shift.
Conflict in state 60 between rule 15 and token EQ resolved as reduce.
Conflict in state 60 between rule 15 and token NEQ resolved as reduce.
Conflict in state 60 between rule 15 and token LT resolved as reduce.
Conflict in state 60 between rule 15 and token LE resolved as reduce.
Conflict in state 60 between rule 15 and token GT resolved as reduce.
Conflict in state 60 between rule 15 and token GE resolved as reduce.
Conflict in state 60 between rule 15 and token AND resolved as reduce.
Conflict in state 60 between rule 15 and token OR resolved as reduce.
Conflict in state 61 between rule 16 and token PLUS resolved as reduce.
Conflict in state 61 between rule 16 and token MINUS resolved as reduce.
Conflict in state 61 between rule 16 and token TIMES resolved as shift.
Conflict in state 61 between rule 16 and token DIVIDE resolved as shift.
Conflict in state 61 between rule 16 and token EQ resolved as reduce.
Conflict in state 61 between rule 16 and token NEQ resolved as reduce.
Conflict in state 61 between rule 16 and token LT resolved as reduce.
Conflict in state 61 between rule 16 and token LE resolved as reduce.
Conflict in state 61 between rule 16 and token GT resolved as reduce.
Conflict in state 61 between rule 16 and token GE resolved as reduce.
Conflict in state 61 between rule 16 and token AND resolved as reduce.
Conflict in state 61 between rule 16 and token OR resolved as reduce.
Conflict in state 62 between rule 17 and token PLUS resolved as reduce.
Conflict in state 62 between rule 17 and token MINUS resolved as reduce.
Conflict in state 62 between rule 17 and token TIMES resolved as reduce.
Conflict in state 62 between rule 17 and token DIVIDE resolved as reduce.
Conflict in state 62 between rule 17 and token EQ resolved as reduce.
Conflict in state 62 between rule 17 and token NEQ resolved as reduce.
Conflict in state 62 between rule 17 and token LT resolved as reduce.
Conflict in state 62 between rule 17 and token LE resolved as reduce.
Conflict in state 62 between rule 17 and token GT resolved as reduce.
Conflict in state 62 between rule 17 and token GE resolved as reduce.
Conflict in state 62 between rule 17 and token AND resolved as reduce.
Conflict in state 62 between rule 17 and token OR resolved as reduce.
Conflict in state 63 between rule 18 and token PLUS resolved as reduce.
Conflict in state 63 between rule 18 and token MINUS resolved as reduce.
Conflict in state 63 between rule 18 and token TIMES resolved as reduce.
Conflict in state 63 between rule 18 and token DIVIDE resolved as reduce.
Conflict in state 63 between rule 18 and token EQ resolved as reduce.
Conflict in state 63 between rule 18 and token NEQ resolved as reduce.
Conflict in state 63 between rule 18 and token LT resolved as reduce.
Conflict in state 63 between rule 18 and token LE resolved as reduce.
Conflict in state 63 between rule 18 and token GT resolved as reduce.
Conflict in state 63 between rule 18 and token GE resolved as reduce.
Conflict in state 63 between rule 18 and token AND resolved as reduce.
Conflict in state 63 between rule 18 and token OR resolved as reduce.
Conflict in state 64 between rule 19 and token PLUS resolved as shift.
Conflict in state 64 between rule 19 and token MINUS resolved as shift.
Conflict in state 64 between rule 19 and token TIMES resolved as shift.
Conflict in state 64 between rule 19 and token DIVIDE resolved as shift.
Conflict in state 64 between rule 19 and token EQ resolved as reduce.
Conflict in state 64 between rule 19 and token NEQ resolved as reduce.
Conflict in state 64 between rule 19 and token LT resolved as reduce.
Conflict in state 64 between rule 19 and token LE resolved as reduce.
Conflict in state 64 between rule 19 and token GT resolved as reduce.
Conflict in state 64 between rule 19 and token GE resolved as reduce.
Conflict in state 64 between rule 19 and token AND resolved as reduce.
Conflict in state 64 between rule 19 and token OR resolved as reduce.
Conflict in state 65 between rule 20 and token PLUS resolved as shift.
Conflict in state 65 between rule 20 and token MINUS resolved as shift.
Conflict in state 65 between rule 20 and token TIMES resolved as shift.
Conflict in state 65 between rule 20 and token DIVIDE resolved as shift.
Conflict in state 65 between rule 20 and token EQ resolved as reduce.
Conflict in state 65 between rule 20 and token NEQ resolved as reduce.
Conflict in state 65 between rule 20 and token LT resolved as reduce.
Conflict in state 65 between rule 20 and token LE resolved as reduce.
Conflict in state 65 between rule 20 and token GT resolved as reduce.
Conflict in state 65 between rule 20 and token GE resolved as reduce.
Conflict in state 65 between rule 20 and token AND resolved as reduce.
Conflict in state 65 between rule 20 and token OR resolved as reduce.
Conflict in state 66 between rule 21 and token PLUS resolved as shift.
Conflict in state 66 between rule 21 and token MINUS resolved as shift.
Conflict in state 66 between rule 21 and token TIMES resolved as shift.
Conflict in state 66 between rule 21 and token DIVIDE resolved as shift.
Conflict in state 66 between rule 21 and token EQ resolved as reduce.
Conflict in state 66 between rule 21 and token NEQ resolved as reduce.
Conflict in state 66 between rule 21 and token LT resolved as reduce.
Conflict in state 66 between rule 21 and token LE resolved as reduce.
Conflict in state 66 between rule 21 and token GT resolved as reduce.
Conflict in state 66 between rule 21 and token GE resolved as reduce.
Conflict in state 66 between rule 21 and token AND resolved as reduce.
Conflict in state 66 between rule 21 and token OR resolved as reduce.
Conflict in state 67 between rule 22 and token PLUS resolved as shift.
Conflict in state 67 between rule 22 and token MINUS resolved as shift.
Conflict in state 67 between rule 22 and token TIMES resolved as shift.
Conflict in state 67 between rule 22 and token DIVIDE resolved as shift.
Conflict in state 67 between rule 22 and token EQ resolved as reduce.
Conflict in state 67 between rule 22 and token NEQ resolved as reduce.
Conflict in state 67 between rule 22 and token LT resolved as reduce.
Conflict in state 67 between rule 22 and token LE resolved as reduce.
Conflict in state 67 between rule 22 and token GT resolved as reduce.
Conflict in state 67 between rule 22 and token GE resolved as reduce.
Conflict in state 67 between rule 22 and token AND resolved as reduce.
Conflict in state 67 between rule 22 and token OR resolved as reduce.
Conflict in state 68 between rule 23 and token PLUS resolved as shift.
Conflict in state 68 between rule 23 and token MINUS resolved as shift.
Conflict in state 68 between rule 23 and token TIMES resolved as shift.
Conflict in state 68 between rule 23 and token DIVIDE resolved as shift.
Conflict in state 68 between rule 23 and token EQ resolved as reduce.
Conflict in state 68 between rule 23 and token NEQ resolved as reduce.
Conflict in state 68 between rule 23 and token LT resolved as reduce.
Conflict in state 68 between rule 23 and token LE resolved as reduce.
Conflict in state 68 between rule 23 and token GT resolved as reduce.
Conflict in state 68 between rule 23 and token GE resolved as reduce.
Conflict in state 68 between rule 23 and token AND resolved as reduce.
Conflict in state 68 between rule 23 and token OR resolved as reduce.
Conflict in state 69 between rule 24 and token PLUS resolved as shift.
Conflict in state 69 between rule 24 and token MINUS resolved as shift.
Conflict in state 69 between rule 24 and token TIMES resolved as shift.
Conflict in state 69 between rule 24 and token DIVIDE resolved as shift.
Conflict in state 69 between rule 24 and token EQ resolved as reduce.
Conflict in state 69 between rule 24 and token NEQ resolved as reduce.
Conflict in state 69 between rule 24 and token LT resolved as reduce.
Conflict in state 69 between rule 24 and token LE resolved as reduce.
Conflict in state 69 between rule 24 and token GT resolved as reduce.
Conflict in state 69 between rule 24 and token GE resolved as reduce.
Conflict in state 69 between rule 24 and token AND resolved as reduce.
Conflict in state 69 between rule 24 and token OR resolved as reduce.
Conflict in state 70 between rule 25 and token PLUS resolved as shift.
Conflict in state 70 between rule 25 and token MINUS resolved as shift.
Conflict in state 70 between rule 25 and token TIMES resolved as shift.
Conflict in state 70 between rule 25 and token DIVIDE resolved as shift.
Conflict in state 70 between rule 25 and token EQ resolved as shift.
Conflict in state 70 between rule 25 and token NEQ resolved as shift.
Conflict in state 70 between rule 25 and token LT resolved as shift.
Conflict in state 70 between rule 25 and token LE resolved as shift.
Conflict in state 70 between rule 25 and token GT resolved as shift.
Conflict in state 70 between rule 25 and token GE resolved as shift.
Conflict in state 70 between rule 25 and token AND resolved as reduce.
Conflict in state 70 between rule 25 and token OR resolved as reduce.
Conflict in state 71 between rule 26 and token PLUS resolved as shift.
Conflict in state 71 between rule 26 and token MINUS resolved as shift.
Conflict in state 71 between rule 26 and token TIMES resolved as shift.
Conflict in state 71 between rule 26 and token DIVIDE resolved as shift.
Conflict in state 71 between rule 26 and token EQ resolved as shift.
Conflict in state 71 between rule 26 and token NEQ resolved as shift.
Conflict in state 71 between rule 26 and token LT resolved as shift.
Conflict in state 71 between rule 26 and token LE resolved as shift.
Conflict in state 71 between rule 26 and token GT resolved as shift.
Conflict in state 71 between rule 26 and token GE resolved as shift.
Conflict in state 71 between rule 26 and token AND resolved as reduce.
Conflict in state 71 between rule 26 and token OR resolved as reduce.
Conflict in state 75 between rule 63 and token PLUS resolved as shift.
Conflict in state 75 between rule 63 and token MINUS resolved as shift.
Conflict in state 75 between rule 63 and token TIMES resolved as shift.
Conflict in state 75 between rule 63 and token DIVIDE resolved as shift.
Conflict in state 75 between rule 63 and token EQ resolved as shift.
Conflict in state 75 between rule 63 and token NEQ resolved as shift.
Conflict in state 75 between rule 63 and token LT resolved as shift.
Conflict in state 75 between rule 63 and token LE resolved as shift.
Conflict in state 75 between rule 63 and token GT resolved as shift.
Conflict in state 75 between rule 63 and token GE resolved as shift.
Conflict in state 75 between rule 63 and token AND resolved as shift.
Conflict in state 75 between rule 63 and token OR resolved as shift.
Conflict in state 82 between rule 27 and token PLUS resolved as shift.
Conflict in state 82 between rule 27 and token MINUS resolved as shift.
Conflict in state 82 between rule 27 and token TIMES resolved as shift.
Conflict in state 82 between rule 27 and token DIVIDE resolved as shift.
Conflict in state 82 between rule 27 and token EQ resolved as shift.
Conflict in state 82 between rule 27 and token NEQ resolved as shift.
Conflict in state 82 between rule 27 and token LT resolved as shift.
Conflict in state 82 between rule 27 and token LE resolved as shift.
Conflict in state 82 between rule 27 and token GT resolved as shift.
Conflict in state 82 between rule 27 and token GE resolved as shift.
Conflict in state 82 between rule 27 and token AND resolved as shift.
Conflict in state 82 between rule 27 and token OR resolved as shift.
Conflict in state 129 between rule 28 and token PLUS resolved as shift.
Conflict in state 129 between rule 28 and token MINUS resolved as shift.
Conflict in state 129 between rule 28 and token TIMES resolved as shift.
Conflict in state 129 between rule 28 and token DIVIDE resolved as shift.
Conflict in state 129 between rule 28 and token EQ resolved as shift.
Conflict in state 129 between rule 28 and token NEQ resolved as shift.
Conflict in state 129 between rule 28 and token LT resolved as shift.
Conflict in state 129 between rule 28 and token LE resolved as shift.
Conflict in state 129 between rule 28 and token GT resolved as shift.
Conflict in state 129 between rule 28 and token GE resolved as shift.
Conflict in state 129 between rule 28 and token AND resolved as shift.
Conflict in state 129 between rule 28 and token OR resolved as shift.
State 74 contains 1 shift/reduce conflict.

Grammar
rule 1    program -> exp
rule 2    exp -> INT
rule 3    exp -> FLOAT
rule 4    exp -> STRING
rule 5    exp -> variable
rule 6    exp -> SequenceExp
rule 7    exp -> LPAREN exp RPAREN
rule 8    exp -> LetExp
rule 9    exp -> ForExp
rule 10   exp -> IfThenExp
rule 11   exp -> AssignExp
rule 12   exp -> OpExp
rule 13   exp -> CallExp
rule 14   exp -> NIL
rule 15   OpExp -> exp PLUS exp
rule 16   OpExp -> exp MINUS exp
rule 17   OpExp -> exp TIMES exp
rule 18   OpExp -> exp DIVIDE exp
rule 19   OpExp -> exp EQ exp
rule 20   OpExp -> exp NEQ exp
rule 21   OpExp -> exp LT exp
rule 22   OpExp -> exp LE exp
rule 23   OpExp -> exp GT exp
rule 24   OpExp -> exp GE exp
rule 25   OpExp -> exp AND exp
rule 26   OpExp -> exp OR exp
rule 27   IfThenExp -> IF exp THEN exp
rule 28   ForExp -> FOR ID ASSIGN exp TO exp DO exp
rule 29   ListExpSemicolon -> exp SEMICOLON ListExpSemicolon
rule 30   ListExpSemicolon -> exp SEMICOLON exp
rule 31   ListExpComma -> exp COMMA ListExpComma
rule 32   ListExpComma -> exp
rule 33   SequenceExp -> LPAREN ListExpSemicolon RPAREN
rule 34   TypeFields -> ID COLON ID COMMA TypeFields
rule 35   TypeFields -> ID COLON ID
rule 36   TypeDeclaration -> TYPE ID EQ ID
rule 37   TypeDeclaration -> TYPE ID EQ ARRAY OF ID
rule 38   TypeDeclaration -> TYPE ID EQ LBRACE TypeFields RBRACE
rule 39   AllocateArrayExp -> ID LBRACK INT RBRACK OF NIL
rule 40   AllocateArrayExp -> ID LBRACK INT RBRACK OF INT
rule 41   AllocateArrayExp -> ID LBRACK INT RBRACK OF FLOAT
rule 42   AllocateRecordExp -> ID LBRACE ListExpComma RBRACE
rule 43   VariableDeclaration -> VAR ID COLON ID
rule 44   VariableDeclaration -> VAR ID ASSIGN exp
rule 45   VariableDeclaration -> VAR ID ASSIGN AllocateArrayExp
rule 46   VariableDeclaration -> VAR ID ASSIGN AllocateRecordExp
rule 47   VariableDeclaration -> VAR ID COLON ID ASSIGN exp
rule 48   VariableDeclaration -> VAR ID COLON ID ASSIGN AllocateArrayExp
rule 49   VariableDeclaration -> VAR ID COLON ID ASSIGN AllocateRecordExp
rule 50   FunctionDeclaration -> FUNCTION ID LPAREN RPAREN EQ exp
rule 51   FunctionDeclaration -> FUNCTION ID LPAREN RPAREN COLON ID EQ exp
rule 52   FunctionDeclaration -> FUNCTION ID LPAREN TypeFields RPAREN EQ exp
rule 53   FunctionDeclaration -> FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp
rule 54   declaration -> TypeDeclaration
rule 55   declaration -> VariableDeclaration
rule 56   declaration -> FunctionDeclaration
rule 57   declarations -> declaration declarations
rule 58   declarations -> declaration
rule 59   LetExp -> LET declarations IN exp END
rule 60   variable -> ID
rule 61   variable -> variable ARROW ID
rule 62   variable -> variable LBRACK exp RBRACK
rule 63   AssignExp -> variable ASSIGN exp
rule 64   AssignExp -> variable ASSIGN AllocateArrayExp
rule 65   AssignExp -> variable ASSIGN AllocateRecordExp
rule 66   CallExp -> ID LPAREN RPAREN
rule 67   CallExp -> ID LPAREN ListExpComma RPAREN

Terminals, with rules where they appear

$ (-1)
error (256)
INT (258) 2 39 40 41
FLOAT (259) 3 41
STRING (260) 4
ID (261) 28 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
    53 60 61 66 67
COMMA (262) 31 34
COLON (263) 34 35 43 47 48 49 51 53
SEMICOLON (264) 29 30
LPAREN (265) 7 33 50 51 52 53 66 67
RPAREN (266) 7 33 50 51 52 53 66 67
LBRACK (267) 39 40 41 62
RBRACK (268) 39 40 41 62
LBRACE (269) 38 42
RBRACE (270) 38 42
ARROW (271) 61
PLUS (272) 15
MINUS (273) 16
TIMES (274) 17
DIVIDE (275) 18
EQ (276) 19 36 37 38 50 51 52 53
NEQ (277) 20
LT (278) 21
LE (279) 22
GT (280) 23
GE (281) 24
AND (282) 25
OR (283) 26
ASSIGN (284) 28 44 45 46 47 48 49 63 64 65
ARRAY (285) 37
IF (286) 27
THEN (287) 27
ELSE (288)
WHILE (289)
FOR (290) 28
TO (291) 28
DO (292) 28
LET (293) 59
IN (294) 59
END (295) 59
OF (296) 37 39 40 41
BREAK (297)
NIL (298) 14 39
FUNCTION (299) 50 51 52 53
VAR (300) 43 44 45 46 47 48 49
TYPE (301) 36 37 38

Nonterminals, with rules where they appear

program (47)
    on left: 1
exp (48)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14, on right: 1 7 15 16 17
    18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 44 47 50 51 52 53
    59 62 63
OpExp (49)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26, on right: 12
IfThenExp (50)
    on left: 27, on right: 10
ForExp (51)
    on left: 28, on right: 9
ListExpSemicolon (52)
    on left: 29 30, on right: 29 33
ListExpComma (53)
    on left: 31 32, on right: 31 42 67
SequenceExp (54)
    on left: 33, on right: 6
TypeFields (55)
    on left: 34 35, on right: 34 38 52 53
TypeDeclaration (56)
    on left: 36 37 38, on right: 54
AllocateArrayExp (57)
    on left: 39 40 41, on right: 45 48 64
AllocateRecordExp (58)
    on left: 42, on right: 46 49 65
VariableDeclaration (59)
    on left: 43 44 45 46 47 48 49, on right: 55
FunctionDeclaration (60)
    on left: 50 51 52 53, on right: 56
declaration (61)
    on left: 54 55 56, on right: 57 58
declarations (62)
    on left: 57 58, on right: 57 59
LetExp (63)
    on left: 59, on right: 8
variable (64)
    on left: 60 61 62, on right: 5 61 62 63 64 65
AssignExp (65)
    on left: 63 64 65, on right: 11
CallExp (66)
    on left: 66 67, on right: 13


state 0

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    program	go to state 141
    exp 	go to state 10
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 1

    exp  ->  INT .   (rule 2)

    $default	reduce using rule 2 (exp)



state 2

    exp  ->  FLOAT .   (rule 3)

    $default	reduce using rule 3 (exp)



state 3

    exp  ->  STRING .   (rule 4)

    $default	reduce using rule 4 (exp)



state 4

    variable  ->  ID .   (rule 60)
    CallExp  ->  ID . LPAREN RPAREN   (rule 66)
    CallExp  ->  ID . LPAREN ListExpComma RPAREN   (rule 67)

    LPAREN	shift, and go to state 19

    $default	reduce using rule 60 (variable)



state 5

    exp  ->  LPAREN . exp RPAREN   (rule 7)
    SequenceExp  ->  LPAREN . ListExpSemicolon RPAREN   (rule 33)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 20
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpSemicolon	go to state 21
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 6

    IfThenExp  ->  IF . exp THEN exp   (rule 27)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 22
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 7

    ForExp  ->  FOR . ID ASSIGN exp TO exp DO exp   (rule 28)

    ID  	shift, and go to state 23



state 8

    LetExp  ->  LET . declarations IN exp END   (rule 59)

    FUNCTION	shift, and go to state 24
    VAR 	shift, and go to state 25
    TYPE	shift, and go to state 26

    TypeDeclaration	go to state 27
    VariableDeclaration	go to state 28
    FunctionDeclaration	go to state 29
    declaration	go to state 30
    declarations	go to state 31



state 9

    exp  ->  NIL .   (rule 14)

    $default	reduce using rule 14 (exp)



state 10

    program  ->  exp .   (rule 1)
    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 1 (program)



state 11

    exp  ->  OpExp .   (rule 12)

    $default	reduce using rule 12 (exp)



state 12

    exp  ->  IfThenExp .   (rule 10)

    $default	reduce using rule 10 (exp)



state 13

    exp  ->  ForExp .   (rule 9)

    $default	reduce using rule 9 (exp)



state 14

    exp  ->  SequenceExp .   (rule 6)

    $default	reduce using rule 6 (exp)



state 15

    exp  ->  LetExp .   (rule 8)

    $default	reduce using rule 8 (exp)



state 16

    exp  ->  variable .   (rule 5)
    variable  ->  variable . ARROW ID   (rule 61)
    variable  ->  variable . LBRACK exp RBRACK   (rule 62)
    AssignExp  ->  variable . ASSIGN exp   (rule 63)
    AssignExp  ->  variable . ASSIGN AllocateArrayExp   (rule 64)
    AssignExp  ->  variable . ASSIGN AllocateRecordExp   (rule 65)

    LBRACK	shift, and go to state 44
    ARROW	shift, and go to state 45
    ASSIGN	shift, and go to state 46

    $default	reduce using rule 5 (exp)



state 17

    exp  ->  AssignExp .   (rule 11)

    $default	reduce using rule 11 (exp)



state 18

    exp  ->  CallExp .   (rule 13)

    $default	reduce using rule 13 (exp)



state 19

    CallExp  ->  ID LPAREN . RPAREN   (rule 66)
    CallExp  ->  ID LPAREN . ListExpComma RPAREN   (rule 67)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    RPAREN	shift, and go to state 47
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 48
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpComma	go to state 49
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 20

    exp  ->  LPAREN exp . RPAREN   (rule 7)
    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ListExpSemicolon  ->  exp . SEMICOLON ListExpSemicolon   (rule 29)
    ListExpSemicolon  ->  exp . SEMICOLON exp   (rule 30)

    SEMICOLON	shift, and go to state 50
    RPAREN	shift, and go to state 51
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43



state 21

    SequenceExp  ->  LPAREN ListExpSemicolon . RPAREN   (rule 33)

    RPAREN	shift, and go to state 52



state 22

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    IfThenExp  ->  IF exp . THEN exp   (rule 27)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    THEN	shift, and go to state 53



state 23

    ForExp  ->  FOR ID . ASSIGN exp TO exp DO exp   (rule 28)

    ASSIGN	shift, and go to state 54



state 24

    FunctionDeclaration  ->  FUNCTION . ID LPAREN RPAREN EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION . ID LPAREN RPAREN COLON ID EQ exp   (rule 51)
    FunctionDeclaration  ->  FUNCTION . ID LPAREN TypeFields RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION . ID LPAREN TypeFields RPAREN COLON ID EQ exp   (rule 53)

    ID  	shift, and go to state 55



state 25

    VariableDeclaration  ->  VAR . ID COLON ID   (rule 43)
    VariableDeclaration  ->  VAR . ID ASSIGN exp   (rule 44)
    VariableDeclaration  ->  VAR . ID ASSIGN AllocateArrayExp   (rule 45)
    VariableDeclaration  ->  VAR . ID ASSIGN AllocateRecordExp   (rule 46)
    VariableDeclaration  ->  VAR . ID COLON ID ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR . ID COLON ID ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR . ID COLON ID ASSIGN AllocateRecordExp   (rule 49)

    ID  	shift, and go to state 56



state 26

    TypeDeclaration  ->  TYPE . ID EQ ID   (rule 36)
    TypeDeclaration  ->  TYPE . ID EQ ARRAY OF ID   (rule 37)
    TypeDeclaration  ->  TYPE . ID EQ LBRACE TypeFields RBRACE   (rule 38)

    ID  	shift, and go to state 57



state 27

    declaration  ->  TypeDeclaration .   (rule 54)

    $default	reduce using rule 54 (declaration)



state 28

    declaration  ->  VariableDeclaration .   (rule 55)

    $default	reduce using rule 55 (declaration)



state 29

    declaration  ->  FunctionDeclaration .   (rule 56)

    $default	reduce using rule 56 (declaration)



state 30

    declarations  ->  declaration . declarations   (rule 57)
    declarations  ->  declaration .   (rule 58)

    FUNCTION	shift, and go to state 24
    VAR 	shift, and go to state 25
    TYPE	shift, and go to state 26

    $default	reduce using rule 58 (declarations)

    TypeDeclaration	go to state 27
    VariableDeclaration	go to state 28
    FunctionDeclaration	go to state 29
    declaration	go to state 30
    declarations	go to state 58



state 31

    LetExp  ->  LET declarations . IN exp END   (rule 59)

    IN  	shift, and go to state 59



state 32

    OpExp  ->  exp PLUS . exp   (rule 15)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 60
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 33

    OpExp  ->  exp MINUS . exp   (rule 16)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 61
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 34

    OpExp  ->  exp TIMES . exp   (rule 17)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 62
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 35

    OpExp  ->  exp DIVIDE . exp   (rule 18)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 63
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 36

    OpExp  ->  exp EQ . exp   (rule 19)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 64
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 37

    OpExp  ->  exp NEQ . exp   (rule 20)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 65
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 38

    OpExp  ->  exp LT . exp   (rule 21)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 66
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 39

    OpExp  ->  exp LE . exp   (rule 22)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 67
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 40

    OpExp  ->  exp GT . exp   (rule 23)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 68
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 41

    OpExp  ->  exp GE . exp   (rule 24)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 69
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 42

    OpExp  ->  exp AND . exp   (rule 25)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 70
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 43

    OpExp  ->  exp OR . exp   (rule 26)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 71
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 44

    variable  ->  variable LBRACK . exp RBRACK   (rule 62)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 72
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 45

    variable  ->  variable ARROW . ID   (rule 61)

    ID  	shift, and go to state 73



state 46

    AssignExp  ->  variable ASSIGN . exp   (rule 63)
    AssignExp  ->  variable ASSIGN . AllocateArrayExp   (rule 64)
    AssignExp  ->  variable ASSIGN . AllocateRecordExp   (rule 65)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 74
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 75
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    AllocateArrayExp	go to state 76
    AllocateRecordExp	go to state 77
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 47

    CallExp  ->  ID LPAREN RPAREN .   (rule 66)

    $default	reduce using rule 66 (CallExp)



state 48

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ListExpComma  ->  exp . COMMA ListExpComma   (rule 31)
    ListExpComma  ->  exp .   (rule 32)

    COMMA	shift, and go to state 78
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 32 (ListExpComma)



state 49

    CallExp  ->  ID LPAREN ListExpComma . RPAREN   (rule 67)

    RPAREN	shift, and go to state 79



state 50

    ListExpSemicolon  ->  exp SEMICOLON . ListExpSemicolon   (rule 29)
    ListExpSemicolon  ->  exp SEMICOLON . exp   (rule 30)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 80
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpSemicolon	go to state 81
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 51

    exp  ->  LPAREN exp RPAREN .   (rule 7)

    $default	reduce using rule 7 (exp)



state 52

    SequenceExp  ->  LPAREN ListExpSemicolon RPAREN .   (rule 33)

    $default	reduce using rule 33 (SequenceExp)



state 53

    IfThenExp  ->  IF exp THEN . exp   (rule 27)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 82
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 54

    ForExp  ->  FOR ID ASSIGN . exp TO exp DO exp   (rule 28)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 83
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 55

    FunctionDeclaration  ->  FUNCTION ID . LPAREN RPAREN EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION ID . LPAREN RPAREN COLON ID EQ exp   (rule 51)
    FunctionDeclaration  ->  FUNCTION ID . LPAREN TypeFields RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID . LPAREN TypeFields RPAREN COLON ID EQ exp   (rule 53)

    LPAREN	shift, and go to state 84



state 56

    VariableDeclaration  ->  VAR ID . COLON ID   (rule 43)
    VariableDeclaration  ->  VAR ID . ASSIGN exp   (rule 44)
    VariableDeclaration  ->  VAR ID . ASSIGN AllocateArrayExp   (rule 45)
    VariableDeclaration  ->  VAR ID . ASSIGN AllocateRecordExp   (rule 46)
    VariableDeclaration  ->  VAR ID . COLON ID ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR ID . COLON ID ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID . COLON ID ASSIGN AllocateRecordExp   (rule 49)

    COLON	shift, and go to state 85
    ASSIGN	shift, and go to state 86



state 57

    TypeDeclaration  ->  TYPE ID . EQ ID   (rule 36)
    TypeDeclaration  ->  TYPE ID . EQ ARRAY OF ID   (rule 37)
    TypeDeclaration  ->  TYPE ID . EQ LBRACE TypeFields RBRACE   (rule 38)

    EQ  	shift, and go to state 87



state 58

    declarations  ->  declaration declarations .   (rule 57)

    $default	reduce using rule 57 (declarations)



state 59

    LetExp  ->  LET declarations IN . exp END   (rule 59)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 88
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 60

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp PLUS exp .   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 15 (OpExp)



state 61

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp MINUS exp .   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 16 (OpExp)



state 62

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp TIMES exp .   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)


    $default	reduce using rule 17 (OpExp)



state 63

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp DIVIDE exp .   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)


    $default	reduce using rule 18 (OpExp)



state 64

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp EQ exp .   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 19 (OpExp)



state 65

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp NEQ exp .   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 20 (OpExp)



state 66

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp LT exp .   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 21 (OpExp)



state 67

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp LE exp .   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 22 (OpExp)



state 68

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp GT exp .   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 23 (OpExp)



state 69

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp GE exp .   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35

    $default	reduce using rule 24 (OpExp)



state 70

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp AND exp .   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41

    $default	reduce using rule 25 (OpExp)



state 71

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    OpExp  ->  exp OR exp .   (rule 26)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41

    $default	reduce using rule 26 (OpExp)



state 72

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    variable  ->  variable LBRACK exp . RBRACK   (rule 62)

    RBRACK	shift, and go to state 89
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43



state 73

    variable  ->  variable ARROW ID .   (rule 61)

    $default	reduce using rule 61 (variable)



state 74

    AllocateArrayExp  ->  ID . LBRACK INT RBRACK OF NIL   (rule 39)
    AllocateArrayExp  ->  ID . LBRACK INT RBRACK OF INT   (rule 40)
    AllocateArrayExp  ->  ID . LBRACK INT RBRACK OF FLOAT   (rule 41)
    AllocateRecordExp  ->  ID . LBRACE ListExpComma RBRACE   (rule 42)
    variable  ->  ID .   (rule 60)
    CallExp  ->  ID . LPAREN RPAREN   (rule 66)
    CallExp  ->  ID . LPAREN ListExpComma RPAREN   (rule 67)

    LPAREN	shift, and go to state 19
    LBRACK	shift, and go to state 90
    LBRACE	shift, and go to state 91

    LBRACK	[reduce using rule 60 (variable)]
    $default	reduce using rule 60 (variable)



state 75

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    AssignExp  ->  variable ASSIGN exp .   (rule 63)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 63 (AssignExp)



state 76

    AssignExp  ->  variable ASSIGN AllocateArrayExp .   (rule 64)

    $default	reduce using rule 64 (AssignExp)



state 77

    AssignExp  ->  variable ASSIGN AllocateRecordExp .   (rule 65)

    $default	reduce using rule 65 (AssignExp)



state 78

    ListExpComma  ->  exp COMMA . ListExpComma   (rule 31)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 48
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpComma	go to state 92
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 79

    CallExp  ->  ID LPAREN ListExpComma RPAREN .   (rule 67)

    $default	reduce using rule 67 (CallExp)



state 80

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ListExpSemicolon  ->  exp . SEMICOLON ListExpSemicolon   (rule 29)
    ListExpSemicolon  ->  exp . SEMICOLON exp   (rule 30)
    ListExpSemicolon  ->  exp SEMICOLON exp .   (rule 30)

    SEMICOLON	shift, and go to state 50
    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 30 (ListExpSemicolon)



state 81

    ListExpSemicolon  ->  exp SEMICOLON ListExpSemicolon .   (rule 29)

    $default	reduce using rule 29 (ListExpSemicolon)



state 82

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    IfThenExp  ->  IF exp THEN exp .   (rule 27)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 27 (IfThenExp)



state 83

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ForExp  ->  FOR ID ASSIGN exp . TO exp DO exp   (rule 28)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    TO  	shift, and go to state 93



state 84

    FunctionDeclaration  ->  FUNCTION ID LPAREN . RPAREN EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION ID LPAREN . RPAREN COLON ID EQ exp   (rule 51)
    FunctionDeclaration  ->  FUNCTION ID LPAREN . TypeFields RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID LPAREN . TypeFields RPAREN COLON ID EQ exp   (rule 53)

    ID  	shift, and go to state 94
    RPAREN	shift, and go to state 95

    TypeFields	go to state 96



state 85

    VariableDeclaration  ->  VAR ID COLON . ID   (rule 43)
    VariableDeclaration  ->  VAR ID COLON . ID ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR ID COLON . ID ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID COLON . ID ASSIGN AllocateRecordExp   (rule 49)

    ID  	shift, and go to state 97



state 86

    VariableDeclaration  ->  VAR ID ASSIGN . exp   (rule 44)
    VariableDeclaration  ->  VAR ID ASSIGN . AllocateArrayExp   (rule 45)
    VariableDeclaration  ->  VAR ID ASSIGN . AllocateRecordExp   (rule 46)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 74
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 98
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    AllocateArrayExp	go to state 99
    AllocateRecordExp	go to state 100
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 87

    TypeDeclaration  ->  TYPE ID EQ . ID   (rule 36)
    TypeDeclaration  ->  TYPE ID EQ . ARRAY OF ID   (rule 37)
    TypeDeclaration  ->  TYPE ID EQ . LBRACE TypeFields RBRACE   (rule 38)

    ID  	shift, and go to state 101
    LBRACE	shift, and go to state 102
    ARRAY	shift, and go to state 103



state 88

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    LetExp  ->  LET declarations IN exp . END   (rule 59)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    END 	shift, and go to state 104



state 89

    variable  ->  variable LBRACK exp RBRACK .   (rule 62)

    $default	reduce using rule 62 (variable)



state 90

    AllocateArrayExp  ->  ID LBRACK . INT RBRACK OF NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK . INT RBRACK OF INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK . INT RBRACK OF FLOAT   (rule 41)

    INT 	shift, and go to state 105



state 91

    AllocateRecordExp  ->  ID LBRACE . ListExpComma RBRACE   (rule 42)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 48
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    ListExpComma	go to state 106
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 92

    ListExpComma  ->  exp COMMA ListExpComma .   (rule 31)

    $default	reduce using rule 31 (ListExpComma)



state 93

    ForExp  ->  FOR ID ASSIGN exp TO . exp DO exp   (rule 28)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 107
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 94

    TypeFields  ->  ID . COLON ID COMMA TypeFields   (rule 34)
    TypeFields  ->  ID . COLON ID   (rule 35)

    COLON	shift, and go to state 108



state 95

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN . EQ exp   (rule 50)
    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN . COLON ID EQ exp   (rule 51)

    COLON	shift, and go to state 109
    EQ  	shift, and go to state 110



state 96

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields . RPAREN EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields . RPAREN COLON ID EQ exp   (rule 53)

    RPAREN	shift, and go to state 111



state 97

    VariableDeclaration  ->  VAR ID COLON ID .   (rule 43)
    VariableDeclaration  ->  VAR ID COLON ID . ASSIGN exp   (rule 47)
    VariableDeclaration  ->  VAR ID COLON ID . ASSIGN AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID COLON ID . ASSIGN AllocateRecordExp   (rule 49)

    ASSIGN	shift, and go to state 112

    $default	reduce using rule 43 (VariableDeclaration)



state 98

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    VariableDeclaration  ->  VAR ID ASSIGN exp .   (rule 44)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 44 (VariableDeclaration)



state 99

    VariableDeclaration  ->  VAR ID ASSIGN AllocateArrayExp .   (rule 45)

    $default	reduce using rule 45 (VariableDeclaration)



state 100

    VariableDeclaration  ->  VAR ID ASSIGN AllocateRecordExp .   (rule 46)

    $default	reduce using rule 46 (VariableDeclaration)



state 101

    TypeDeclaration  ->  TYPE ID EQ ID .   (rule 36)

    $default	reduce using rule 36 (TypeDeclaration)



state 102

    TypeDeclaration  ->  TYPE ID EQ LBRACE . TypeFields RBRACE   (rule 38)

    ID  	shift, and go to state 94

    TypeFields	go to state 113



state 103

    TypeDeclaration  ->  TYPE ID EQ ARRAY . OF ID   (rule 37)

    OF  	shift, and go to state 114



state 104

    LetExp  ->  LET declarations IN exp END .   (rule 59)

    $default	reduce using rule 59 (LetExp)



state 105

    AllocateArrayExp  ->  ID LBRACK INT . RBRACK OF NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK INT . RBRACK OF INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK INT . RBRACK OF FLOAT   (rule 41)

    RBRACK	shift, and go to state 115



state 106

    AllocateRecordExp  ->  ID LBRACE ListExpComma . RBRACE   (rule 42)

    RBRACE	shift, and go to state 116



state 107

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ForExp  ->  FOR ID ASSIGN exp TO exp . DO exp   (rule 28)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43
    DO  	shift, and go to state 117



state 108

    TypeFields  ->  ID COLON . ID COMMA TypeFields   (rule 34)
    TypeFields  ->  ID COLON . ID   (rule 35)

    ID  	shift, and go to state 118



state 109

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON . ID EQ exp   (rule 51)

    ID  	shift, and go to state 119



state 110

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN EQ . exp   (rule 50)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 120
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 111

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN . EQ exp   (rule 52)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN . COLON ID EQ exp   (rule 53)

    COLON	shift, and go to state 121
    EQ  	shift, and go to state 122



state 112

    VariableDeclaration  ->  VAR ID COLON ID ASSIGN . exp   (rule 47)
    VariableDeclaration  ->  VAR ID COLON ID ASSIGN . AllocateArrayExp   (rule 48)
    VariableDeclaration  ->  VAR ID COLON ID ASSIGN . AllocateRecordExp   (rule 49)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 74
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 123
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    AllocateArrayExp	go to state 124
    AllocateRecordExp	go to state 125
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 113

    TypeDeclaration  ->  TYPE ID EQ LBRACE TypeFields . RBRACE   (rule 38)

    RBRACE	shift, and go to state 126



state 114

    TypeDeclaration  ->  TYPE ID EQ ARRAY OF . ID   (rule 37)

    ID  	shift, and go to state 127



state 115

    AllocateArrayExp  ->  ID LBRACK INT RBRACK . OF NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK . OF INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK . OF FLOAT   (rule 41)

    OF  	shift, and go to state 128



state 116

    AllocateRecordExp  ->  ID LBRACE ListExpComma RBRACE .   (rule 42)

    $default	reduce using rule 42 (AllocateRecordExp)



state 117

    ForExp  ->  FOR ID ASSIGN exp TO exp DO . exp   (rule 28)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 129
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 118

    TypeFields  ->  ID COLON ID . COMMA TypeFields   (rule 34)
    TypeFields  ->  ID COLON ID .   (rule 35)

    COMMA	shift, and go to state 130

    $default	reduce using rule 35 (TypeFields)



state 119

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON ID . EQ exp   (rule 51)

    EQ  	shift, and go to state 131



state 120

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN EQ exp .   (rule 50)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 50 (FunctionDeclaration)



state 121

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON . ID EQ exp   (rule 53)

    ID  	shift, and go to state 132



state 122

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN EQ . exp   (rule 52)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 133
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 123

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    VariableDeclaration  ->  VAR ID COLON ID ASSIGN exp .   (rule 47)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 47 (VariableDeclaration)



state 124

    VariableDeclaration  ->  VAR ID COLON ID ASSIGN AllocateArrayExp .   (rule 48)

    $default	reduce using rule 48 (VariableDeclaration)



state 125

    VariableDeclaration  ->  VAR ID COLON ID ASSIGN AllocateRecordExp .   (rule 49)

    $default	reduce using rule 49 (VariableDeclaration)



state 126

    TypeDeclaration  ->  TYPE ID EQ LBRACE TypeFields RBRACE .   (rule 38)

    $default	reduce using rule 38 (TypeDeclaration)



state 127

    TypeDeclaration  ->  TYPE ID EQ ARRAY OF ID .   (rule 37)

    $default	reduce using rule 37 (TypeDeclaration)



state 128

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF . NIL   (rule 39)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF . INT   (rule 40)
    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF . FLOAT   (rule 41)

    INT 	shift, and go to state 134
    FLOAT	shift, and go to state 135
    NIL 	shift, and go to state 136



state 129

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    ForExp  ->  FOR ID ASSIGN exp TO exp DO exp .   (rule 28)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 28 (ForExp)



state 130

    TypeFields  ->  ID COLON ID COMMA . TypeFields   (rule 34)

    ID  	shift, and go to state 94

    TypeFields	go to state 137



state 131

    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON ID EQ . exp   (rule 51)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 138
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 132

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID . EQ exp   (rule 53)

    EQ  	shift, and go to state 139



state 133

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN EQ exp .   (rule 52)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 52 (FunctionDeclaration)



state 134

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF INT .   (rule 40)

    $default	reduce using rule 40 (AllocateArrayExp)



state 135

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF FLOAT .   (rule 41)

    $default	reduce using rule 41 (AllocateArrayExp)



state 136

    AllocateArrayExp  ->  ID LBRACK INT RBRACK OF NIL .   (rule 39)

    $default	reduce using rule 39 (AllocateArrayExp)



state 137

    TypeFields  ->  ID COLON ID COMMA TypeFields .   (rule 34)

    $default	reduce using rule 34 (TypeFields)



state 138

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN RPAREN COLON ID EQ exp .   (rule 51)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 51 (FunctionDeclaration)



state 139

    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ . exp   (rule 53)

    INT 	shift, and go to state 1
    FLOAT	shift, and go to state 2
    STRING	shift, and go to state 3
    ID  	shift, and go to state 4
    LPAREN	shift, and go to state 5
    IF  	shift, and go to state 6
    FOR 	shift, and go to state 7
    LET 	shift, and go to state 8
    NIL 	shift, and go to state 9

    exp 	go to state 140
    OpExp	go to state 11
    IfThenExp	go to state 12
    ForExp	go to state 13
    SequenceExp	go to state 14
    LetExp	go to state 15
    variable	go to state 16
    AssignExp	go to state 17
    CallExp	go to state 18



state 140

    OpExp  ->  exp . PLUS exp   (rule 15)
    OpExp  ->  exp . MINUS exp   (rule 16)
    OpExp  ->  exp . TIMES exp   (rule 17)
    OpExp  ->  exp . DIVIDE exp   (rule 18)
    OpExp  ->  exp . EQ exp   (rule 19)
    OpExp  ->  exp . NEQ exp   (rule 20)
    OpExp  ->  exp . LT exp   (rule 21)
    OpExp  ->  exp . LE exp   (rule 22)
    OpExp  ->  exp . GT exp   (rule 23)
    OpExp  ->  exp . GE exp   (rule 24)
    OpExp  ->  exp . AND exp   (rule 25)
    OpExp  ->  exp . OR exp   (rule 26)
    FunctionDeclaration  ->  FUNCTION ID LPAREN TypeFields RPAREN COLON ID EQ exp .   (rule 53)

    PLUS	shift, and go to state 32
    MINUS	shift, and go to state 33
    TIMES	shift, and go to state 34
    DIVIDE	shift, and go to state 35
    EQ  	shift, and go to state 36
    NEQ 	shift, and go to state 37
    LT  	shift, and go to state 38
    LE  	shift, and go to state 39
    GT  	shift, and go to state 40
    GE  	shift, and go to state 41
    AND 	shift, and go to state 42
    OR  	shift, and go to state 43

    $default	reduce using rule 53 (FunctionDeclaration)



state 141

    $   	go to state 142



state 142

    $   	go to state 143



state 143

    $default	accept
