let

	type IntList = {head:int, tail:IntList}

	var a:IntList := IntList{1,nil}
	var b:IntList := IntList{3,nil}
	var c:IntList := IntList{5,nil}
	var d:IntList := IntList{7,nil}

	var A:IntList := IntList{2,nil}
	var B:IntList := IntList{4,nil}
	var C:IntList := IntList{6,nil}
	var D:IntList := IntList{8,nil}

	function Merge(a:IntList, A:IntList):IntList =

	let

		var L:IntList := nil
		var element:int := 0

	in

		(
			if a=nil then L := A;
			if A=nil then L := a;

			if a->head <= A->head then (element := a->head; L := IntList{element,Merge(a->tail,A)});
			if a->head >  A->head then (element := A->head; L := IntList{element,Merge(a,A->tail)});

			L
		)

	end

	function PrintIntList(L:IntList):void =

	if L != nil then
	(	
		PrintInt(L->head);
		PrintIntList(L->tail)
	)

in

	(
		c->tail := d;
		b->tail := c;
		a->tail := b;
		C->tail := D;
		B->tail := C;
		A->tail := B;
		PrintIntList(Merge(a,A))
	)

end
